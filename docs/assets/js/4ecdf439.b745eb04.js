(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6895],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7595:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],s={id:"actions-rust",title:"Rust actions",sidebar_label:"Rust actions",slug:"/actions-rust"},l=void 0,c={unversionedId:"actions-rust",id:"actions-rust",isDocsHomePage:!1,title:"Rust actions",description:"The process of creating Rust actions is similar to that of other actions.",source:"@site/content/actions-rust.md",sourceDirName:".",slug:"/actions-rust",permalink:"/docs/actions-rust",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/actions-rust.md",version:"current",frontMatter:{id:"actions-rust",title:"Rust actions",sidebar_label:"Rust actions",slug:"/actions-rust"},sidebar:"docs",previous:{title:"Ruby actions",permalink:"/docs/actions-ruby"},next:{title:".NET actions",permalink:"/docs/actions-dotnet"}},p=[{value:"Packaging Rust actions in zip files",id:"packaging-rust-actions-in-zip-files",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The process of creating Rust actions is similar to that of ",(0,i.kt)("a",{parentName:"p",href:"/docs/openwhisk-actions#the-basics"},"other actions"),"."),(0,i.kt)("p",null,"The following sections guide you through creating and invoking a single Rust action, and demonstrate how to bundle multiple Rust files and third party dependencies."),(0,i.kt)("p",null,"An example action Rust action is simply a top-level function."),(0,i.kt)("p",null,"For example, create a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"hello.rs")," with the following source code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Rust"},'extern crate serde_json;\n\nuse serde_derive::{Deserialize, Serialize};\nuse serde_json::{Error, Value};\n\n#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]\nstruct Input {\n    #[serde(default = "stranger")]\n    name: String,\n}\n\n#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]\nstruct Output {\n    greeting: String,\n}\n\nfn stranger() -> String {\n    "stranger".to_string()\n}\n\npub fn main(args: Value) -> Result<Value, Error> {\n    let input: Input = serde_json::from_value(args)?;\n    let output = Output {\n        greeting: format!("Hello, {}", input.name),\n    };\n    serde_json::to_value(output)\n}\n')),(0,i.kt)("p",null,"Rust actions are mainly composed by a ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," function that accepts a JSON ",(0,i.kt)("inlineCode",{parentName:"p"},"serdes Value")," as input and returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," including a JSON ",(0,i.kt)("inlineCode",{parentName:"p"},"serde Value"),"."),(0,i.kt)("p",null,"The entry method for the action is ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," by default but may be specified explicitly when creating\nthe action with the ",(0,i.kt)("inlineCode",{parentName:"p"},"wsk")," CLI using ",(0,i.kt)("inlineCode",{parentName:"p"},"--main"),", as with any other action type."),(0,i.kt)("p",null,"You can create an OpenWhisk action called ",(0,i.kt)("inlineCode",{parentName:"p"},"helloRust")," from this function as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"wsk action create helloRust --kind rust:1.34 hello.rs\n")),(0,i.kt)("p",null,"The CLI automatically infers the type of the action from the source file extension.\nFor ",(0,i.kt)("inlineCode",{parentName:"p"},".rs")," source files, the action runs using a Rust v1.34 runtime."),(0,i.kt)("p",null,"Action invocation is the same for Rust actions as it is for any other actions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"wsk action invoke --result helloRust --param name World\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'  {\n      "greeting": "Hello World!"\n  }\n')),(0,i.kt)("p",null,"Find out more about parameters in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/openwhisk-parameters"},"Working with parameters")," section."),(0,i.kt)("h3",{id:"packaging-rust-actions-in-zip-files"},"Packaging Rust actions in zip files"),(0,i.kt)("p",null,"If your action needs external dependencies, you need to provide a zip file including your source and your cargo file with all your dependencies."),(0,i.kt)("p",null,"The filename of the source file containing the entry point (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"main"),") must be ",(0,i.kt)("inlineCode",{parentName:"p"},"lib.rs"),".\nThe folder structure should be as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"|- Cargo.toml\n|- src\n    |- lib.rs\n")),(0,i.kt)("p",null,"Here is an example of a Cargo.toml file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'[package]\nname = "actions"\nversion = "0.1.0"\nauthors = ["John Doe <john@doe.com>"]\nedition = "2018"\n\n[dependencies]\nserde_json = "1.0"\nserde = "1.0"\nserde_derive = "1.0"\n')),(0,i.kt)("p",null,"To zip your folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"zip -r helloRust.zip Cargo.toml src\n")),(0,i.kt)("p",null,"and then create the action:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wsk action create helloRust --kind rust:1.34 helloRust.zip\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Large portions of this page is copied from the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apache/openwhisk/tree/master/docs"},"Apache OpenWhisk documentation")," on April 23rd 2021 - where there have been customisations to match Hypi's deployment this has been noted. Apache OpenWhisk and the Apache name are the property of the Apache Foundation and licensed under the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apache/openwhisk/blob/master/LICENSE.txt"},"Apache V2 license")," ."))))}d.isMDXComponent=!0}}]);