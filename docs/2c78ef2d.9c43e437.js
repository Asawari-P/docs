(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{135:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),l=function(e){var t=r.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,b=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return n?r.a.createElement(b,c(c({ref:t},u),{},{components:n})):r.a.createElement(b,c({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return l}));var a=n(3),r=n(7),o=(n(0),n(135)),i={id:"gql-mutations",title:"GraphQL Mutations",sidebar_label:"GraphQL Mutations",slug:"/gql-mutations"},c={unversionedId:"gql-mutations",id:"gql-mutations",isDocsHomePage:!1,title:"GraphQL Mutations",description:"As a complete platform we focus not just on querying but creating and updating your app's data. Similar to queries, mutations must also have data/fields selected. You can ask for any nested fields. This is useful for fetching the new state of an object after an update.",source:"@site/content/gql-mutations.md",slug:"/gql-mutations",permalink:"/docs/gql-mutations",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/gql-mutations.md",version:"current",sidebar_label:"GraphQL Mutations",sidebar:"docs",previous:{title:"GraphQL Queries",permalink:"/docs/gql-queries"},next:{title:"GraphQL Directives",permalink:"/docs/gql-directives"}},s=[{value:"Form a mutation",id:"form-a-mutation",children:[]}],u={toc:s};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"As a complete platform we focus not just on querying but creating and updating your app's data. Similar to queries, mutations must also have data/fields selected. You can ask for any nested fields. This is useful for fetching the new state of an object after an update."),Object(o.b)("h2",{id:"form-a-mutation"},"Form a mutation"),Object(o.b)("p",null,"You must specify three things when defining a mutation:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"Name of the mutation"),", typically named after the type of modification you want to perform e.g.",Object(o.b)("inlineCode",{parentName:"p"},"CreateItem"),"...but it can be anything you want.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The",Object(o.b)("inlineCode",{parentName:"p"},"Input variable"),". This should be passed as an argument to the mutation name as the data you want to send to the server.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"Payload object"),", The data you want to send to the server."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'  mutation CreateTodo( $todos: [TodoInput!]!) {\n       createTodo(todo: $todo) {\n          hypi {\n            id\n            created\n           }\n         description\n         completed\n       }\n     }\n    # Variables\n   {\n     "todo": [ {\n       "description": "This is a great todo!"\n        "completed":"false",\n     }  ]\n   }\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'mutation CreateTodo( $todos: [TodoInput!]!) {\n   createTodo(todo: $todo) {\n      hypi {\n        id\n        created\n       }\n     description\n     completed\n   }\n }\n# Variables\n{\n "todo": [ {\n   "description": "This is a great todo!"\n    "completed":"false",\n }  ]\n}\n')),Object(o.b)("p",null,"Result:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createTodo": [{\n        "hypi": {\n               "id": "c94144ec-52aa-4337-9d8b-15fa8ec5c979"\n               "created": "2019-11-02T15:45:16Z"\n           }\n        "description": "This is a great todo!"\n        "completed":"false",\n    }]\n  }\n}\n')))}l.isMDXComponent=!0}}]);