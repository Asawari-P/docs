(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{143:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=s(n),u=a,d=b["".concat(o,".").concat(u)]||b[u]||g[u]||i;return n?r.a.createElement(d,l(l({ref:t},p),{},{components:n})):r.a.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},98:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(8),i=(n(0),n(143)),o={id:"time-series-aggregations",title:"Timeseries Aggregations with Date Granularity",sidebar_label:"Timeseries Aggregations with Date Granularity",slug:"/time-series-aggregations"},l={unversionedId:"time-series-aggregations",id:"time-series-aggregations",isDocsHomePage:!1,title:"Timeseries Aggregations with Date Granularity",description:"In this tutorial, we will work with the following schema to demonstrate how to use thedateGranularityparameter to group numeric fields over time.",source:"@site/content/time-series-aggregations.md",slug:"/time-series-aggregations",permalink:"/docs/time-series-aggregations",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/time-series-aggregations.md",version:"current",sidebar_label:"Timeseries Aggregations with Date Granularity",sidebar:"docs",previous:{title:"Hypi GraphQL CRUD Tutorial",permalink:"/docs/gql-crud-tutorial"},next:{title:"Glossary",permalink:"/docs/glossary"}},c=[{value:"Aggregation Types",id:"aggregation-types",children:[]},{value:"Using GroupBy with dateGranularity",id:"using-groupby-with-dategranularity",children:[]}],p={toc:c};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In this tutorial, we will work with the following schema to demonstrate how to use the",Object(i.b)("inlineCode",{parentName:"p"},"dateGranularity"),"parameter to group numeric fields over time."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"type ActorRatings {\n    rating: Float!\n    gender: Gender!\n}\nenum Gender {\n    Male\n    Female\n    NotSpecified\n}\n")),Object(i.b)("p",null,"First is looking into the aggregate types for the type that you want to aggregate."),Object(i.b)("h2",{id:"aggregation-types"},"Aggregation Types"),Object(i.b)("p",null,'For each type in our schema, we have two aggregations that we can perform on them. The first one is named "',"[","our","_","type","]",'" and the second one is named "',"[","our","_","type","]",'With".'),Object(i.b)("p",null,"Looking at our schema, our aggregations will be"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"actorRatings(\n    where: String\n): ActorRatingsAggs\n")),Object(i.b)("p",null,"and"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"actorRatingsWith(\n    where: String\n    groupBy: [ActorRatingsGroupByOptions!]!\n    having: String\n    first: Int\n    after: String\n    last: Int\n    before: String\n    includeTrashed: Boolean\n): [ActorRatingsAggs]\n")),Object(i.b)("p",null,"In this tutorial we will focus on using",Object(i.b)("inlineCode",{parentName:"p"},"actorRatingsWith"),"since it is the one that allows grouping data."),Object(i.b)("h2",{id:"using-groupby-with-dategranularity"},"Using GroupBy with dateGranularity"),Object(i.b)("p",null,"Now, let's get into some examples."),Object(i.b)("p",null,"Let's say I want to get the ",Object(i.b)("strong",{parentName:"p"},"average")," ",Object(i.b)("inlineCode",{parentName:"p"},"rating")," ",Object(i.b)("strong",{parentName:"p"},"for each day")," for the actor with",Object(i.b)("inlineCode",{parentName:"p"},"hypi.id='actor1'"),". The aggregation looks like this."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"{\n  aggregate {\n    actorRatingsWith(\n      where: \"hypi.id='actor1'\"\n      groupBy: [{ field: hypi_created, dateGranularity: DAYS }]) {\n      rating {\n        avg\n        groupValues{\n          key\n          value\n        }\n      }\n    }\n  }\n}\n")),Object(i.b)("p",null,"Here we are using the ",Object(i.b)("inlineCode",{parentName:"p"},"actorRatingsWith")," aggregation with the ",Object(i.b)("inlineCode",{parentName:"p"},"groupBy")," parameter pointing at the field ",Object(i.b)("inlineCode",{parentName:"p"},"hypi_created")," and passing the ",Object(i.b)("inlineCode",{parentName:"p"},"dateGranularity: DAYS")," parameter to indicate that we want to group by the ",Object(i.b)("inlineCode",{parentName:"p"},"hypi_created")," field and have the results grouped  ",Object(i.b)("strong",{parentName:"p"},"specifically"),"  by the  ",Object(i.b)("strong",{parentName:"p"},"days"),"."),Object(i.b)("p",null,"As for the data we want to be returned, we specify",Object(i.b)("inlineCode",{parentName:"p"},"avg"),"and then the",Object(i.b)("inlineCode",{parentName:"p"},"groupValues"),"so we can know the ",Object(i.b)("strong",{parentName:"p"},"value of the field")," we are grouping by -",Object(i.b)("inlineCode",{parentName:"p"},"hypi_created"),"."),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Required Selections:")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Note that the groupValues field is a mandatory selection when using the dateGranularity parameter. This means it ",Object(i.b)("em",{parentName:"p"},"MUST")," be one of the fields you select. Otherwise you will receive an error."))),Object(i.b)("p",null,"The result will look like this."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "aggregate": {\n      "actorRatingsWith": [\n        {\n          "rating": {\n            "avg": 4.5,\n            "groupValues": [\n              {\n                "key": "hypi_created",\n                "value": "2020-07-09"\n              }\n            ]\n          }\n        },\n        {\n          "rating": {\n            "avg": 4.2,\n            "groupValues": [\n              {\n                "key": "hypi_created",\n                "value": "2020-07-10"\n              }\n            ]\n          }\n        },\n        {\n          "rating": {\n            "avg": 3.3,\n            "groupValues": [\n              {\n                "key": "hypi_created",\n                "value": "2020-07-11"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n')),Object(i.b)("p",null,"As you can see, the ",Object(i.b)("inlineCode",{parentName:"p"},"value")," field of the ",Object(i.b)("inlineCode",{parentName:"p"},"groupValues"),", is displaying dates with different days and the ",Object(i.b)("strong",{parentName:"p"},"average")," is calculated for that day."),Object(i.b)("p",null,"Similarly we can use all the other aggregations: ",Object(i.b)("inlineCode",{parentName:"p"},"count")," , ",Object(i.b)("inlineCode",{parentName:"p"},"min")," , ",Object(i.b)("inlineCode",{parentName:"p"},"max")," , ",Object(i.b)("inlineCode",{parentName:"p"},"sum"),"."),Object(i.b)("p",null,"Also, just as we did ",Object(i.b)("inlineCode",{parentName:"p"},"DAYS")," for the ",Object(i.b)("inlineCode",{parentName:"p"},"dateGranularity")," in this tutorial, you can use ",Object(i.b)("inlineCode",{parentName:"p"},"HOURS")," , ",Object(i.b)("inlineCode",{parentName:"p"},"MINUTES")," and ",Object(i.b)("inlineCode",{parentName:"p"},"SECONDS")," as for your needs."),Object(i.b)("p",null,"In conclusion, aggregations using ",Object(i.b)("inlineCode",{parentName:"p"},"dateGranularity")," boils down to:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Using the right aggregation type - which is named "',"[","your_type","]",'With".'),Object(i.b)("li",{parentName:"ol"},"Using",Object(i.b)("inlineCode",{parentName:"li"},"groupBy"),"to specify which ",Object(i.b)("strong",{parentName:"li"},"field")," and ",Object(i.b)("inlineCode",{parentName:"li"},"dateGranularity")," you would like to group by. In our example ",Object(i.b)("inlineCode",{parentName:"li"},"hypi_created")," , ",Object(i.b)("inlineCode",{parentName:"li"},"DAYS"),"."),Object(i.b)("li",{parentName:"ol"},"Using ",Object(i.b)("inlineCode",{parentName:"li"},"where")," if you want to filter before calculating - it is an ",Object(i.b)("a",{parentName:"li",href:"/docs/arcql"},"ArcQL")," string. In our example -",Object(i.b)("inlineCode",{parentName:"li"},"hypi.id='actor1'"),"."),Object(i.b)("li",{parentName:"ol"},"Adding the field that you want to aggregate. In our example ",Object(i.b)("inlineCode",{parentName:"li"},"rating"),"."),Object(i.b)("li",{parentName:"ol"},"Choosing what you want to calculate. In our example ",Object(i.b)("inlineCode",{parentName:"li"},"avg"),"(others include ",Object(i.b)("inlineCode",{parentName:"li"},"count")," , ",Object(i.b)("inlineCode",{parentName:"li"},"min")," , ",Object(i.b)("inlineCode",{parentName:"li"},"max")," and ",Object(i.b)("inlineCode",{parentName:"li"},"sum"),")"),Object(i.b)("li",{parentName:"ol"},"Adding ",Object(i.b)("inlineCode",{parentName:"li"},"groupValues")," so you can see the ",Object(i.b)("strong",{parentName:"li"},"value of the field")," that you grouped by in the ",Object(i.b)("strong",{parentName:"li"},"result set"),".")))}s.isMDXComponent=!0}}]);