(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{118:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return b})),t.d(n,"default",(function(){return s}));var o=t(3),r=t(7),a=(t(0),t(135)),i={id:"references",title:"Creating and removing one-to-one and one-to-many references",sidebar_label:"References",slug:"/references"},l={unversionedId:"references",id:"references",isDocsHomePage:!1,title:"Creating and removing one-to-one and one-to-many references",description:"Hypi can provide one-to-one or one-to-many references for tables.",source:"@site/content/references.md",slug:"/references",permalink:"/docs/references",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/references.md",version:"current",sidebar_label:"References"},b=[{value:"Examples",id:"examples",children:[{value:"One-to-One Reference",id:"one-to-one-reference",children:[]},{value:"Many-to-One Reference:",id:"many-to-one-reference",children:[]}]},{value:"Subscription",id:"subscription",children:[{value:"Example",id:"example",children:[]}]}],c={toc:b};function s(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Hypi can provide ",Object(a.b)("inlineCode",{parentName:"p"},"one-to-one")," or ",Object(a.b)("inlineCode",{parentName:"p"},"one-to-many")," references for tables."),Object(a.b)("p",null,"Let\u2019s say you want to connect Table A to Table B through one common field \u2018C\u2019. So, table A has this field C of type B. This is the one-to-one reference. If field C is an array or list of type B, it is a one-to-many kind of reference."),Object(a.b)("p",null,"For creating a reference, Hypi has the built-in function ",Object(a.b)("inlineCode",{parentName:"p"},"link"),". The references can also be removed and data in the referenced table can be deleted using the ",Object(a.b)("inlineCode",{parentName:"p"},"unlink")," function."),Object(a.b)("p",null,"Let\u2019s check the signatures of link and unlink functions."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},"link(\n    from:HypiMutationType!\n    to:HypiMutationType!\n    via:String!\n    whereFromID:String!\n    andToID:String!\n):Boolean!\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},"unlink(\n    from:HypiMutationType!\n    to:HypiMutationType!\n    via:String!\n    whereFromID:String!\n    andToID:String!\n):Boolean!\n")),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"th"},"Parameter")),Object(a.b)("th",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"th"},"Description")),Object(a.b)("th",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"th"},"Example")))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"From")),Object(a.b)("td",{parentName:"tr",align:null},"The data type from where reference needs to be created"),Object(a.b)("td",{parentName:"tr",align:null},"from: \u2018Author\u2019")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"to")),Object(a.b)("td",{parentName:"tr",align:null},"The data type to be referred"),Object(a.b)("td",{parentName:"tr",align:null},"to: \u2018Book\u2019")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"Via")),Object(a.b)("td",{parentName:"tr",align:null},"The field of object \u2018to\u2019 in the object \u2018from\u2019"),Object(a.b)("td",{parentName:"tr",align:null},"Booklist")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"whereFromID")),Object(a.b)("td",{parentName:"tr",align:null},"Hypi ID of the Object of type \u2018from\u2019 that needs an entry of object \u2018to\u2019"),Object(a.b)("td",{parentName:"tr",align:null},"\u2018Author1\u2019")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"andToID")),Object(a.b)("td",{parentName:"tr",align:null},"Hypi ID of the Object of type \u2018to\u2019 that needs to be entered into the object of type \u2018from\u2019"),Object(a.b)("td",{parentName:"tr",align:null},"\u2018Book1\u2019")))),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)("p",null,"To go through examples, we will need below schema."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},"typeBook {\n    title:\xa0String\n    authorid:\xa0Int\n    price:\xa0Float\n}\n\ntypeAuthor\xa0{\n    name:\xa0String\n    age:\xa0Int\n    bestbook:\xa0Book\n    booklist:\xa0[Book!]\n}\n")),Object(a.b)("p",null,"Here, the field ",Object(a.b)("inlineCode",{parentName:"p"},"bestbook")," will be used to generate ",Object(a.b)("inlineCode",{parentName:"p"},"one-to-one reference")," between table ",Object(a.b)("inlineCode",{parentName:"p"},"Author")," and table ",Object(a.b)("inlineCode",{parentName:"p"},"Book"),". Also, the field ",Object(a.b)("inlineCode",{parentName:"p"},"booklist")," will be used to generate ",Object(a.b)("inlineCode",{parentName:"p"},"one-to-many")," kind of references."),Object(a.b)("p",null,"Let\u2019s add data in the table Author and table Book as follows."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},'\nmutation Upsert($values: HypiUpsertInputUnion!) {\n  upsert(values: $values) {\n    id\n  }\n}\n//Author Table\n{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown",\n            "age": 56,\n            "bestbook": {\n              "title": "Inferno",\n              "authorid": 1\n            },\n            "booklist": [\n              {\n                "title": "Da Vinci Code",\n                "authorid": 1\n              },\n              {\n                "title": "The Last Symbol",\n                "authorid": 1\n              }\n            ]\n          },\n          "cursor": "Author1"\n        }\n      ]\n    }\n  }\n}\n\n//Book Table\n\n{\n  "values": {\n    "Book": [\n      {\n        "hypi": {"id": "Book1"},\n        "title":  "Inferno",\n        "authorid": 1\n      }       \n    ]\n  }\n}      \n\n\n\n')),Object(a.b)("h3",{id:"one-to-one-reference"},"One-to-One Reference"),Object(a.b)("p",null,"If you want to enter ",Object(a.b)("inlineCode",{parentName:"p"},"Book1")," as the bestbook of Author1, you may link Author1 with Book1 via field ",Object(a.b)("inlineCode",{parentName:"p"},"bestbook"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},'mutation {\n    link(from:Author,to:Book,\n    via:"bestbook",whereFromID:"Author1",andToID:"Book1")\n}\n')),Object(a.b)("p",null,"Result:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "link": true\n  }\n}\n')),Object(a.b)("p",null,"Linking the tables results in the insertion of data from Book1 into the field Bestbook of Author1. Now, retrieve data of Author using find function and verify."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown",\n            "age": 56,\n            //Book1 Inserted\n            "bestbook": {\n              "title": "Inferno",\n              "authorid": 1\n            },\n            "booklist": [\n              {\n                "title": "Da Vinci Code",\n                "authorid": 1\n              },\n              {\n                "title": "The Last Symbol",\n                "authorid": 1\n              }\n            ]\n          },\n          "cursor": "Author1"\n        }\n      ]\n    }\n  }\n}\n')),Object(a.b)("p",null,"You may remove the reference using the unlink function."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},'mutation{\n    unlink(from:Author,to:Book,\n    via:"bestbook",whereFromID:"Author1",andToID:"Book1")\n}\n//Result\n{\n  "data": {\n    "unlink": true\n  }\n}\n')),Object(a.b)("p",null,"This results in the setting of the value of bestbook as null. Book1 data remains as it is. But the object simply gets removed from the field bestbook of object Author1."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown",\n            "age": 56,\n             //Book1 entry removed\n            "bestbook": null,\n            "booklist": [\n              {\n                "title": "Da Vinci Code",\n                "authorid": 1\n              },\n              {\n                "title": "The Last Symbol",\n                "authorid": 1\n              },\n              {\n                "title": "Inferno",\n                "authorid": 1\n              }\n            ]\n          },\n          "cursor": "Author1"\n        }\n      ]\n    }\n  }\n}\n')),Object(a.b)("h3",{id:"many-to-one-reference"},"Many-to-One Reference:"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"link")," function works on an array as well. You may link to the booklist field from the Author1 object to Book1. So an entry of Book1 gets added into the booklist array of Author1."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},'mutation{\n    link(from:Author,to:Book,\n    via:"booklist",whereFromID:"Author1",andToID:"Book1")\n}\n//Result\n{\n  "data": {\n    "link": true\n  }\n}\n')),Object(a.b)("p",null,"You may retrieve data from Author1 using find function."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown",\n            "age": 56,\n            "bestbook": null,\n            "booklist": [\n              {\n                "title": "Da Vinci Code",\n                "authorid": 1\n              },\n              {\n                "title": "The Last Symbol",\n                "authorid": 1\n              },\n                //Book1 inserted in the array\n              {\n                "title": "Inferno",\n                "authorid": 1\n              }\n            ]\n          },\n          "cursor": "Author1"\n        }\n      ]\n    }\n  }\n}\n')),Object(a.b)("p",null,"Unlinking the reference would simply remove the entry Book1 from the booklist. The Book1 object would not get deleted from the platform. But its entry would be removed from the array. "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},'mutation{\n    unlink(from:Author,to:Book,\n    via:"booklist",whereFromID:"Author1",andToID:"Author1Book1")\n}\n//Result\n{\n  "data": {\n    "unlink": true\n  }\n}\n')),Object(a.b)("p",null,"Retrieve Author1 data to get following result."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "values": {\n    "Author": [\n      {\n        "hypi": {"id": "Author1"},\n        "name": "Dan Brown",\n        "age": 56,\n        "booklist":[\n          {\n            "hypi": {"id": "Author1Book1"},\n            "title": "Da Vinci Code",\n            "price": 12.99,\n            "authorid": 1\n          },\n          {\n            "hypi": {"id": "Author1Book2"},\n            "title": "The Last Symbol",\n            "price": 10,\n            "authorid": 1\n          }          \n        ] \n      }       \n    ]\n  }\n}      \n\n')),Object(a.b)("p",null,"Using link and unlink function you may add or remove objects from the array of objects."),Object(a.b)("hr",null),Object(a.b)("h2",{id:"subscription"},"Subscription"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"subscription")," function monitors the upsert operation on any object of any type. If the mutation (insertion of data) happens in any field of the object on the client-side, the function reports the event on server side. It acts as a link between two sides. Subscription works on the ",Object(a.b)("inlineCode",{parentName:"p"},"upsert")," function execution only and not on other mutations."),Object(a.b)("p",null,"Suppose you are creating a messaging app. When a sender sends the message, the receiver will receive the message through a subscription. The receiver listens to the changes in the text of the message object of the sender. If the data is inserted in the text field of the message object of the sender, the receiver receives the inserted text."),Object(a.b)("p",null,"You may add the ",Object(a.b)("inlineCode",{parentName:"p"},"subscription")," to any field of any data type. The subscription works on the subscribed field only and not on other fields."),Object(a.b)("h3",{id:"example"},"Example"),Object(a.b)("p",null,"Here, we are configuring the subscription on the",Object(a.b)("inlineCode",{parentName:"p"},"name")," field of the ",Object(a.b)("inlineCode",{parentName:"p"},"Author")," type. This switches on the listener mode of the receiver. This works as a listener/receiver socket."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},"subscription {\n  subscribe {\n    Author {\n      name\n    }\n  }\n}\n")),Object(a.b)("p",null,"Open second Hypi GraphQL editor on another tab of the browser selecting the same release and same instance. This works as a sender socket. Insert data in the name field."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'mutation Upsert($values: HypiUpsertInputUnion!) {\n  upsert(values: $values) {\n    id\n  }\n}\n{\n  "values": {\n    "Author": [\n      {\n        "hypi": {"id": "Author1"},\n        "name": "Dan Brown"\n      }       \n    ]\n  }\n}  \n')),Object(a.b)("p",null,"You will get the notification of this insertion into the previous socket that was listening to this event."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "subscribe": {\n      "Author": {\n        "name": "Dan Brown"\n      }\n    }\n  },\n  "errors": null\n}\n')),Object(a.b)("p",null,"You may perform any number of upsert operation. The upsert event would be notified in the listener tab."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "subscribe": {\n      "Author": {\n        "name": "Paulo Coelho"\n      }\n    }\n  },\n  "errors": null\n}\n\n{\n  "data": {\n    "subscribe": {\n      "Author": {\n        "name": "Sudha Murti"\n      }\n    }\n  },\n  "errors": null\n}    \n')),Object(a.b)("p",null,"Please note that you insert data in the ",Object(a.b)("inlineCode",{parentName:"p"},"age")," field of Author1, the insertion notification would not be received."))}s.isMDXComponent=!0},135:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),s=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),u=s(t),d=o,m=u["".concat(i,".").concat(d)]||u[d]||p[d]||a;return t?r.a.createElement(m,l(l({ref:n},c),{},{components:t})):r.a.createElement(m,l({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var b in n)hasOwnProperty.call(n,b)&&(l[b]=n[b]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);