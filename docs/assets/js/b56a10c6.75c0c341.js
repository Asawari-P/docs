(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{155:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(3),i=n(8),r=(n(0),n(190)),p={id:"hypi-cli-react",title:"Use Hypi in a ReactJS Project",sidebar_label:"ReactJS",slug:"/hypi-cli-react"},o={unversionedId:"hypi-cli-react",id:"hypi-cli-react",isDocsHomePage:!1,title:"Use Hypi in a ReactJS Project",description:"ReactJS is a JavaScript library for building user interfaces and UI components. In this guide, we will import the Hypi package within the React Typescript project using Hypi CLI. After the import, you may use Hypi functionalities to build ReactJS applications.",source:"@site/content/hypi-cli-react.md",slug:"/hypi-cli-react",permalink:"/docs/hypi-cli-react",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/hypi-cli-react.md",version:"current",sidebar_label:"ReactJS",sidebar:"docs",previous:{title:"Use Hypi in a Flutter Project",permalink:"/docs/hypi-cli-flutter"},next:{title:"Use Hypi in an Angular Project",permalink:"/docs/hypi-cli-angular"}},c=[{value:"Create React Typescript App",id:"create-react-typescript-app",children:[]},{value:"Login",id:"login",children:[]},{value:"Hypi Init",id:"hypi-init",children:[]},{value:"Hypi GraphQL settings",id:"hypi-graphql-settings",children:[]},{value:"Hypi Sync",id:"hypi-sync",children:[]},{value:"Using GraphQL hooks",id:"using-graphql-hooks",children:[]},{value:"Authentication using Apollo Client",id:"authentication-using-apollo-client",children:[]}],l={toc:c};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"ReactJS is a JavaScript library for building user interfaces and UI components. In this guide, we will import the Hypi package within the React Typescript project using Hypi CLI. After the import, you may use Hypi functionalities to build ReactJS applications."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Prerequisite"),": Knowledge of application development using ReactJS. Development set up for ReactJS."),Object(r.b)("h3",{id:"create-react-typescript-app"},"Create React Typescript App"),Object(r.b)("p",null,"You may create a sample React Typescript app using the following command. "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"npx create-react-app my-app --template typescript`  \n")),Object(r.b)("p",null,"or use an example from ",Object(r.b)("a",{parentName:"p",href:"https://github.com/hypi-universe/hypi-cli-react-example"},"here")," "),Object(r.b)("p",null,"In this example, we will use the apollo client as the graphql client. Add the following dependencies to ",Object(r.b)("inlineCode",{parentName:"p"},"package.json")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'"@apollo/client": "^3.3.16",\n"graphql": "^15.5.0",\n')),Object(r.b)("p",null,"Let's import the Hypi package now."),Object(r.b)("h3",{id:"login"},"Login"),Object(r.b)("p",null,"On the command line, go to your ReactJS application folder. Login to your Hypi account using ",Object(r.b)("a",{parentName:"p",href:"/docs/hypi-cli-intro#hypi-login"},"hypi login")," command. After successful login, the user config file will be placed in ",Object(r.b)("inlineCode",{parentName:"p"},"~/.config/hypi/config.json")," . In case of Windows, the file will be created in ",Object(r.b)("inlineCode",{parentName:"p"},"\\Users\\user\\AppData\\Local")),Object(r.b)("p",null,"Here, are the contents of the file. It makes the connection between Hypi and ReactJS app."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'{\n  "domain": "latest.store.hypi.01f2ga50p2mzkmyqse17gd2bae.hypi.app",\n  "sessionToken": "Auth-Token",\n  "sessionExpires": 1626580838\n}\n')),Object(r.b)("h3",{id:"hypi-init"},"Hypi Init"),Object(r.b)("p",null,"Use the ",Object(r.b)("inlineCode",{parentName:"p"},"hypi init")," command to initialize a new hypi App and Instance in your ReactJS project folder."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"    USAGE\n      $ hypi init [WEBSITE] [NAME] [LABEL] [DOMAIN]\n    \n    OPTIONS\n      -h, --help           show CLI help\n      -i, --have_instance\n    \n    EXAMPLES\n      $ hypi init -i\n      $ hypi init --have_instance\n      $ hypi init\n")),Object(r.b)("p",null,"Go to your ReactJS project folder on the command line and run ",Object(r.b)("inlineCode",{parentName:"p"},"hypi init")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},">hypi init\nThis command will walk you through creating app.yaml and instance.yaml files.\n? Do you have a Hypi instance created at https://hypi.app that you\u2019d like to use? No\n? App name?  ReactJSApp\n? App label?  ReactJSApp\n? Website?  https://hypi.app/apps\n? Domain(Optional)?\nInit done successfully, Now write your schema then run the hypi sync command to generate your app's API\n")),Object(r.b)("p",null,"This creates a  ",Object(r.b)("inlineCode",{parentName:"p"},".hypi")," folder in your ReactJS project folder. Within ",Object(r.b)("inlineCode",{parentName:"p"},".hypi"),", three files are created. ",Object(r.b)("inlineCode",{parentName:"p"},"app.yaml"),", ",Object(r.b)("inlineCode",{parentName:"p"},"instance.yaml")," and ",Object(r.b)("inlineCode",{parentName:"p"},"schema.graphql"),". The files app.yaml and instance.yaml has Hypi ",Object(r.b)("inlineCode",{parentName:"p"},"App and Instance")," details. "),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"You should write your schema inside ",Object(r.b)("inlineCode",{parentName:"p"},"schema.graphql")," file."))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"app.yaml\n==============================\nwebsite:\xa0https://hypi.app/apps\nname:\xa0ReactJSApp\nlabel:\xa0ReactJSApp\nreleases:\n\xa0\xa0-\xa0name:\xa0latest\nschema:\ntypes:\xa0schema.graphql\nstatus:\xa0PUBLISHED\nnotes:\xa0latest\xa0version\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"domain:\xa0engulfs.apps.hypi.app\nrelease:\nname:\xa0latest\nhypi:\nid:\xa001F8EMYY0935THH0GX40K7QESY\nhypi:\nid:\xa001F8EMZ1PN1ANAS1C15K6DD63H\n")),Object(r.b)("p",null,"The new app gets created on the Hypi account. If an existing domain is not provided then a new domain also gets created."),Object(r.b)("p",null,"If you want to use an existing domain on the Hypi website instead of creating a new one, you may provide that domain that as well."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"hypi init\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"This command will walk you through creating app.yaml and instance.yaml files.\n? Do you have a Hypi instance created at https://hypi.app that you\u2019d like to use? Yes\n? Please enter a valid domain engulfs.apps.hypi.app\nInit done successfully, Now write your schema then run the hypi sync command to generate your app's API\n")),Object(r.b)("p",null,"In this case, the existing schema will get imported. "),Object(r.b)("h3",{id:"hypi-graphql-settings"},"Hypi GraphQL settings"),Object(r.b)("p",null,"You may edit the schema in the ",Object(r.b)("inlineCode",{parentName:"p"},"schema.graphql"),"\nLet's edit the schema, to add the data types. Here, we are adding Product data type."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"type Product {\n    hypi: Hypi\n    title: String!\n    description: String!\n    price: Float\n}\n")),Object(r.b)("p",null,"Inside ",Object(r.b)("inlineCode",{parentName:"p"},"src/graphql")," folder, add files related to GraphQl queries and mutations."),Object(r.b)("p",null,"Here is the sample Product Query file : ",Object(r.b)("inlineCode",{parentName:"p"},"src/graphql/products.graphql")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"query products($arcql: String!) {\n    find(type: Product, arcql: $arcql) {\n        edges {\n            node {\n               ...ProductFields\n            }\n        }\n    }\n}\n\nfragment ProductFields on Product {\n   hypi {\n        id\n    }\n    title\n    description\n}    \n")),Object(r.b)("p",null,"You may replace the type ",Object(r.b)("inlineCode",{parentName:"p"},"Product")," with your own data type and fields like ",Object(r.b)("inlineCode",{parentName:"p"},"title/description")," with your own fields."),Object(r.b)("p",null,"Now, add Products Mutation: ",Object(r.b)("inlineCode",{parentName:"p"},"src/graphql/products-mutation.graphql")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"mutation upsert($values:HypiUpsertInputUnion!) {\n  upsert(values:$values)\n    {\n        id\n    }\n}\n")),Object(r.b)("h3",{id:"hypi-sync"},"Hypi Sync"),Object(r.b)("p",null,"You need to generate graphql ReactJS schema file to use Hypi APIs within the ReactJS typescript project. Use the ",Object(r.b)("inlineCode",{parentName:"p"},"hypi sync reactjs")," command for that."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"    USAGE\n      $ hypi sync reactjs\n    \n    OPTIONS\n      -h, --help  show CLI help\n    \n    EXAMPLE\n      $ hypi sync\n")),Object(r.b)("p",null,"Now run ",Object(r.b)("inlineCode",{parentName:"p"},"hypi sync")," to generate ReactJS schema file."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"hypi sync reactjs\nApp created with id : 01F8EMYY01YDD2HB0WH8E1AZJW\nInstance created with id : 01F8EMZ1PN1ANAS1C15K6DD63H\nupdateAppYamlFile done\nupdateInstanceYamlFile done\nIntrospection done\nSync Process... done\nThe file was succesfully generated!\n")),Object(r.b)("p",null,"After syncing, ",Object(r.b)("inlineCode",{parentName:"p"},"graphql.ts")," files get created in the ",Object(r.b)("inlineCode",{parentName:"p"},"\\src\\generated")," folder. Also, ",Object(r.b)("inlineCode",{parentName:"p"},"generated-schema.graphql")," file gets generated in the ",Object(r.b)("inlineCode",{parentName:"p"},".hypi")," folder that has full hypi schema."),Object(r.b)("p",null,"Inside ",Object(r.b)("inlineCode",{parentName:"p"},"graphql.ts")," file, you will find hooks for the query and the mutation to be used inside your typescript components."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"export function useProductsQuery(baseOptions: Apollo.QueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, options);\n        }\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"export function useUpsertMutation(baseOptions?: Apollo.MutationHookOptions<UpsertMutation, UpsertMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpsertMutation, UpsertMutationVariables>(UpsertDocument, options);\n      }\n")),Object(r.b)("p",null,"Now you are ready to create your React TypeScript application using Hypi APIs!"),Object(r.b)("h3",{id:"using-graphql-hooks"},"Using GraphQL hooks"),Object(r.b)("p",null,"Inside src/components, add ",Object(r.b)("inlineCode",{parentName:"p"},"Product")," or your own data type component. Add ",Object(r.b)("inlineCode",{parentName:"p"},"ProductList.js")," file. This file will access the graphql queries and mutations using the hooks."),Object(r.b)("p",null,"Here is the content of the entire file. You may modify this file to use your own hooks."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},'import React, { useState } from \'react\';\nimport { useProductsQuery, useUpsertMutation } from \'../../generated/graphql\'\n\nconst ProductList = (props) => {\n  const [newProduct, setNewProduct] = useState(false)\n  const [productForm, setProductForm] = useState({\n    title: \'\',\n    description: \'\'\n  })\n\n  const { loading, error, data } = useProductsQuery({\n    variables: { arcql: \'*\' },\n  });\n  \n  const [upsertMutation, { upsertData, upsertLoading, upsertError }] = useUpsertMutation()\n\n  const onNewProductHandler = (event) => {\n    event.preventDefault()\n    setNewProduct(true)\n  }\n\n  const inputChangedHandler = (event) => {\n    setProductForm({\n      ...productForm, [event.target.name]: event.target.value\n    })\n  }\n  const submitProductHandler = (event) => {\n    console.log(\'submit\')\n    event.preventDefault()\n    \n      upsertMutation({\n      variables: {\n        values: {\n          Product: {\n            title: productForm.title,\n            description: productForm.description\n          }\n        }\n      }\n    })\n  }\n\n  if (loading) return <p>loading...</p>;\n  if (error) return <p>{error}</p>;\n\n  if (upsertLoading) return <p>loading...</p>;\n  if (upsertError) return <p>{error}</p>;\n  if (upsertData) return <p>{upsertData}</p>;\n\n  let noProductsOutput = null\n  if (data.find.edges.length === 0) {\n    noProductsOutput = (\n      <div>\n        <p>No products found</p>\n      </div>\n    )\n  }\n  let addProductOutput = null;\n  if (newProduct) {\n    addProductOutput = (\n      <form onSubmit={submitProductHandler}>\n        <label htmlFor="title">Title</label>\n        <input\n          className="Input"\n          type="text"\n          id="title"\n          name="title"\n          value={productForm.title}\n          onChange={(event) => inputChangedHandler(event, \'title\')}\n          placeholder="Title.." />\n\n        <label htmlFor="description">Description</label>\n        <input\n          className="Input"\n          type="text"\n          id="description"\n          name="description"\n          value={productForm.description}\n          onChange={inputChangedHandler}\n          placeholder="Description.." />\n\n        <button className="Button" > Submit</button>\n\n      </form>\n    )\n  } else {\n    addProductOutput = (\n      <button className="Button" onClick={onNewProductHandler}> New Product</button>\n    )\n  }\n\n  const productsOutput = data.find.edges.map(product => {\n    return (\n      <div>\n        <h1>{product.node.title}</h1>\n        <p>{product.node.description}</p>\n      </div>\n    )\n  })\n\n  return (\n    <div>\n      {noProductsOutput}\n      {productsOutput}\n      {addProductOutput}\n    </div>\n  )\n};\nexport default ProductList;\n')),Object(r.b)("p",null,"Let's try to understand the usage of hooks in the ProductList component."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"First, we import the hooks from graphql.ts file.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"import { useProductsQuery, useUpsertMutation } from '../../generated/graphql'\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Here, you may declare the GraphQL query hook and provide the ",Object(r.b)("a",{parentName:"li",href:"https://docs.hypi.app/docs/arcql"},"arcql statements")," under variables.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"const { loading, error, data } = useProductsQuery({\n    variables: { arcql: '*' },\n});\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Declare the GraphQL mutation hook.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"const\xa0[upsertMutation,\xa0{\xa0upsertData,\xa0upsertLoading,\xa0upsertError\xa0}]\xa0=\xa0useUpsertMutation()\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Retrieve the data from the ",Object(r.b)("inlineCode",{parentName:"li"},"Product")," data type. The retrieved title and description get placed on the heading h1 and paragraph. Replace the data type and fields as per your own schema.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"  const productsOutput = data.find.edges.map(product => {\n    return (\n      <div>\n        <h1>{product.node.title}</h1>\n        <p>{product.node.description}</p>\n      </div>\n    )\n  })\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Insert data using the mutation. Data from the ",Object(r.b)("inlineCode",{parentName:"li"},"productForm")," gets inserted into the Product table.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"upsertMutation({\n      variables: {\n        values: {\n          Product: {\n            title: productForm.title,\n            description: productForm.description\n          }\n        }\n      }\n    })\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Inside your main ",Object(r.b)("inlineCode",{parentName:"li"},"App.js")," file, you may access the ProductList.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'function App() {\n  return (\n    <div className="App">\n      <header className="App-header">\n        <ProductList />\n      </header>\n    </div>\n  );\n}\n')),Object(r.b)("h3",{id:"authentication-using-apollo-client"},"Authentication using Apollo Client"),Object(r.b)("p",null,"To make an HTTP connection to Hypi Endpoint, we use Apollo client. Following code demonstrates how to make this connection. Replace Hypi Authorization Token (Auth-Token) and hypi domain. This code has been added in the ",Object(r.b)("inlineCode",{parentName:"p"},"apollo-client.js")," file."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloLink,\n  HttpLink,\n} from \"@apollo/client\";\n\nconst httpLink = new HttpLink({ uri: \"https://api.hypi.app/graphql\" });\n\nconst authMiddleware = () =>\n  new ApolloLink((operation, forward) => {\n    // add the authorization to the headers\n    const authToken = 'Auth-Token'\n    const domain = 'teething.apps.hypi.app'\n\n    operation.setContext({\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n        'hypi-domain': `${domain}`\n      },\n    });\n    return forward(operation);\n  });\n\nexport const apolloClient = new ApolloClient({\n  link: authMiddleware().concat(httpLink),\n  cache: new InMemoryCache(),\n});\n")),Object(r.b)("p",null,"Run the application using ",Object(r.b)("inlineCode",{parentName:"p"},"npm run start")," command. To run the application ",Object(r.b)("inlineCode",{parentName:"p"},"react-scripts")," is needed.  You may check the setting in ",Object(r.b)("inlineCode",{parentName:"p"},"packag.json")," file. If the script is not installed, you may install it using ",Object(r.b)("inlineCode",{parentName:"p"},"npm install react-scripts --save")," command."),Object(r.b)("p",null,"This is the simplest way to use Hypi GraphQL queries and Mutations inside React TypeScript application!"))}s.isMDXComponent=!0},190:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),s=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=s(n),b=a,h=u["".concat(p,".").concat(b)]||u[b]||d[b]||r;return n?i.a.createElement(h,o(o({ref:t},l),{},{components:n})):i.a.createElement(h,o({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,p=new Array(r);p[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,p[1]=o;for(var l=2;l<r;l++)p[l]=n[l];return i.a.createElement.apply(null,p)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);