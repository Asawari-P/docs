(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{191:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return m}));var o=t(0),a=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),b=function(e){var n=a.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=b(e.components);return a.a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=b(t),d=o,m=s["".concat(r,".").concat(d)]||s[d]||u[d]||i;return t?a.a.createElement(m,l(l({ref:n},p),{},{components:t})):a.a.createElement(m,l({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},72:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return b}));var o=t(3),a=t(8),i=(t(0),t(191)),r={id:"actions-go",title:"Go actions",sidebar_label:"Go actions",slug:"/actions-go"},l={unversionedId:"actions-go",id:"actions-go",isDocsHomePage:!1,title:"Go actions",description:"The action-golang-v1.11 runtime can execute actions written in the Go programming language in OpenWhisk, either as precompiled binary or compiling sources on the fly.",source:"@site/content/actions-go.md",slug:"/actions-go",permalink:"/docs/actions-go",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/actions-go.md",version:"current",sidebar_label:"Go actions",sidebar:"docs",previous:{title:"Swift actions",permalink:"/docs/actions-swift"},next:{title:"PHP actions",permalink:"/docs/actions-php"}},c=[{value:"Entry Point",id:"entry-point",children:[]},{value:"Signature",id:"signature",children:[]},{value:"Deployment",id:"deployment",children:[]},{value:"Using packages and vendor folder",id:"using-packages-and-vendor-folder",children:[]},{value:"Precompiling Go Sources Offline",id:"precompiling-go-sources-offline",children:[]}],p={toc:c};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"action-golang-v1.11")," runtime can execute actions written in the Go programming language in OpenWhisk, either as precompiled binary or compiling sources on the fly."),Object(i.b)("h3",{id:"entry-point"},"Entry Point"),Object(i.b)("p",null,"The source code of an action is one or more Go source files. The entry point of the action is a function, placed in the ",Object(i.b)("inlineCode",{parentName:"p"},"main")," package. The default name for the main function is ",Object(i.b)("inlineCode",{parentName:"p"},"Main"),", but you can change it to any name you want using the ",Object(i.b)("inlineCode",{parentName:"p"},"--main")," switch in ",Object(i.b)("inlineCode",{parentName:"p"},"wsk"),". The name is however always capitalized. The function must have a specific signature, as described next."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"NOTE")," The runtime does ",Object(i.b)("em",{parentName:"p"},"not")," support different packages from ",Object(i.b)("inlineCode",{parentName:"p"},"main")," for the entry point. If you specify ",Object(i.b)("inlineCode",{parentName:"p"},"hello.main")," the runtime will try to use ",Object(i.b)("inlineCode",{parentName:"p"},"Hello.main"),", that will be almost certainly incorrect. You can however have other packages in your sources, as described below."),Object(i.b)("h3",{id:"signature"},"Signature"),Object(i.b)("p",null,"The expected signature for a ",Object(i.b)("inlineCode",{parentName:"p"},"main")," function is:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"func Main(event map[string]interface{}) map[string]interface{}")),Object(i.b)("p",null,"So a very simple single file ",Object(i.b)("inlineCode",{parentName:"p"},"hello.go")," action would be:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "log"\n\n// Main is the function implementing the action\nfunc Main(obj map[string]interface{}) map[string]interface{} {\n  // do your work\n  name, ok := obj["name"].(string)\n  if !ok {\n    name = "world"\n  }\n  msg := make(map[string]interface{})\n  msg["message"] = "Hello, " + name + "!"\n  // log in stdout or in stderr\n  log.Printf("name=%s\\n", name)\n  // encode the result back in json\n  return msg\n}\n')),Object(i.b)("p",null,"You can deploy it with just:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"wsk action create hello-go hello.go\n")),Object(i.b)("p",null,"You can also have multiple source files in an action, packages and vendor folders."),Object(i.b)("h3",{id:"deployment"},"Deployment"),Object(i.b)("p",null,"The runtime ",Object(i.b)("inlineCode",{parentName:"p"},"action-golang-v1.11")," accepts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"executable binaries in Linux ELF executable compiled for the AMD64 architecture"),Object(i.b)("li",{parentName:"ul"},"zip files containing a binary executable named ",Object(i.b)("inlineCode",{parentName:"li"},"exec")," at the top level, again a Linux ELF executable compiled for the AMD64 architecture"),Object(i.b)("li",{parentName:"ul"},"a single source file in Go, that will be compiled"),Object(i.b)("li",{parentName:"ul"},"a zip file not containing in the top level a binary file ",Object(i.b)("inlineCode",{parentName:"li"},"exec"),", it will be interpreted as a collection of source files in Go, and compiled")),Object(i.b)("p",null,"You can create a binary in the correct format on any Go platform cross-compiling with ",Object(i.b)("inlineCode",{parentName:"p"},"GOOS=Linux")," and ",Object(i.b)("inlineCode",{parentName:"p"},"GOARCH=amd64"),". However it is recommended you use the compiler embedded in the Docker image for this purpose using the precompilation feature, as described below."),Object(i.b)("h3",{id:"using-packages-and-vendor-folder"},"Using packages and vendor folder"),Object(i.b)("p",null,"When you deploy a zip file, you can:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"have all your functions in the ",Object(i.b)("inlineCode",{parentName:"li"},"main")," package"),Object(i.b)("li",{parentName:"ul"},"have some functions placed in some packages, like ",Object(i.b)("inlineCode",{parentName:"li"},"hello")),Object(i.b)("li",{parentName:"ul"},"have some third party dependencies you want to include in your sources")),Object(i.b)("p",null,"If all your functions are in the main package, just place all your sources in the top level of your zip file."),Object(i.b)("h4",{id:"use-a-package-folder"},"Use a package folder"),Object(i.b)("p",null,"If some functions belongs to a package, like ",Object(i.b)("inlineCode",{parentName:"p"},"hello/"),", you need to be careful with the layout of your sources, especially if you use editors like ",Object(i.b)("a",{parentName:"p",href:"#vscode"},"VcCode"),", and make. The layout recommended is the following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"golang-main-package/\n- Makefile\n- src/\n   - main.go\n   - main_test.go\n   - hello/\n       - hello.go\n       - hello_test.go\n")),Object(i.b)("p",null,"For running tests, editing without errors with package resolution, you need to use a ",Object(i.b)("inlineCode",{parentName:"p"},"src")," folder, place the sources that belongs to the main package in the ",Object(i.b)("inlineCode",{parentName:"p"},"src")," and place sources of your package in the ",Object(i.b)("inlineCode",{parentName:"p"},"src/hello")," folder."),Object(i.b)("p",null,"You should import it your subpackage with ",Object(i.b)("inlineCode",{parentName:"p"},'import "hello"'),".\nNote this means if you want to compile locally you have to set your ",Object(i.b)("inlineCode",{parentName:"p"},"GOPATH")," to parent of your ",Object(i.b)("inlineCode",{parentName:"p"},"src")," directory. If you use VSCode, you need to enable the ",Object(i.b)("inlineCode",{parentName:"p"},"go.inferGopath")," option."),Object(i.b)("p",null,"When you send the sources, you will have to zip the content of the ",Object(i.b)("inlineCode",{parentName:"p"},"src")," folder, ",Object(i.b)("em",{parentName:"p"},"not")," the main directory. For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"cd src\nzip -r ../hello.zip *\ncd ..\nwsk action create hellozip hello.zip --kind go:1.11\n")),Object(i.b)("h4",{id:"using-vendor-folders"},"Using vendor folders"),Object(i.b)("p",null,"When you need to use third party libraries, the runtime does not download them from Internet when compiling. You have to provide them,  downloading and placing them using the ",Object(i.b)("inlineCode",{parentName:"p"},"vendor")," folder mechanism. We are going to show here how to use the vendor folder with the ",Object(i.b)("inlineCode",{parentName:"p"},"dep")," tool."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"NOTE")," the ",Object(i.b)("inlineCode",{parentName:"p"},"vendor")," folder does not work at the top level, you have to use a ",Object(i.b)("inlineCode",{parentName:"p"},"src")," folder and a package folder to have also the ",Object(i.b)("inlineCode",{parentName:"p"},"vendor")," folder. If you want use the vendor folder for the ",Object(i.b)("inlineCode",{parentName:"p"},"main")," package, you can do it but instead of placing files that belongs to the ",Object(i.b)("inlineCode",{parentName:"p"},"main")," package in the top-level, you have to place in a subfolder named ",Object(i.b)("inlineCode",{parentName:"p"},"main"),"."),Object(i.b)("p",null,"For example consider you have in the file ",Object(i.b)("inlineCode",{parentName:"p"},"src/hello/hello.go")," the import:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'import "github.com/sirupsen/logrus"\n')),Object(i.b)("p",null,"To create a vendor folder, you need to"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"install the ",Object(i.b)("a",{parentName:"li",href:"https://github.com/golang/dep"},"dep")," tool"),Object(i.b)("li",{parentName:"ul"},"cd to the ",Object(i.b)("inlineCode",{parentName:"li"},"src/hello")," folder (",Object(i.b)("em",{parentName:"li"},"not")," the ",Object(i.b)("inlineCode",{parentName:"li"},"src")," folder)"),Object(i.b)("li",{parentName:"ul"},"run ",Object(i.b)("inlineCode",{parentName:"li"},"DEPPROJECTROOT=$(realpath $PWD/../..) dep init")," the first time")),Object(i.b)("p",null,"The tool will detect the used libraries and create 2 manifest files ",Object(i.b)("inlineCode",{parentName:"p"},"Gopkg.lock")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Gopkg.toml"),". If already have the manifest files, you just need ",Object(i.b)("inlineCode",{parentName:"p"},"dep ensure")," to create and populate the ",Object(i.b)("inlineCode",{parentName:"p"},"vendor")," folder."),Object(i.b)("p",null,"The layout will be something like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"golang-hello-vendor\n- Makefile\n- src/\n    - hello.go\n    - hello/\n      - Gopkg.lock\n      - Gopkg.toml\n         - hello.go\n         - hello_test.go\n         - vendor/\n            - github.com/...\n            - golang.org/...\n")),Object(i.b)("p",null,"Note you do not need to store the ",Object(i.b)("inlineCode",{parentName:"p"},"vendor")," folder in the version control system as it can be regenerated, you only the manifest files. However, you need to include the entire vendor folder when you deploy the action in source format for compilation by the runtime."),Object(i.b)("p",null,"If you need to use vendor folder in the main package, you need to create a directory ",Object(i.b)("inlineCode",{parentName:"p"},"main")," and place all the source code that would normally go in the top level, in the ",Object(i.b)("inlineCode",{parentName:"p"},"main")," folder instead.  A vendor folder in the top level ",Object(i.b)("em",{parentName:"p"},"does not work"),"."),Object(i.b)("a",{name:"precompile"}),Object(i.b)("h3",{id:"precompiling-go-sources-offline"},"Precompiling Go Sources Offline"),Object(i.b)("p",null,"Compiling sources on the image can take some time when the images is initialized. You can speed up precompiling the sources using the image ",Object(i.b)("inlineCode",{parentName:"p"},"action-golang-v1.11")," as an offline compiler. You need ",Object(i.b)("inlineCode",{parentName:"p"},"docker")," for doing that."),Object(i.b)("p",null,"The images accepts a ",Object(i.b)("inlineCode",{parentName:"p"},"-compile <main>")," flag, and expects you provide sources in standard input. It will then compile them, emit the binary in standard output and errors in stderr. The output is always a zip file containing an executable."),Object(i.b)("p",null,"If you have a single source maybe in file ",Object(i.b)("inlineCode",{parentName:"p"},"main.go"),", with a function named ",Object(i.b)("inlineCode",{parentName:"p"},"Main")," just do this:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"docker run openwhisk/action-golang-v1.11 -compile main <main.go >main.zip")),Object(i.b)("p",null,"If you have multiple sources in current directory, even with a subfolder with sources, you can compile it all with:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"cd src\nzip -r ../src.zip *\ncd ..\ndocker -i run openwhisk/action-golang-v1.11 -compile main <src.zip >exec.zip\n")),Object(i.b)("p",null,"Note that the output is always a zip file in  Linux AMD64 format so the executable can be run only inside a Docker Linux container."),Object(i.b)("p",null,"Here a ",Object(i.b)("inlineCode",{parentName:"p"},"Makefile")," is helpful. Check the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/apache/openwhisk-runtime-go/tree/master/examples"},"examples")," for a collection of tested Makefiles. The  generated executable is suitable to be deployed in OpenWhisk, so you can do:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"wsk action create my-action exec.zip --kind go:1.11")),Object(i.b)("p",null,"You can also use just the ",Object(i.b)("inlineCode",{parentName:"p"},"openwhisk/actionloop")," as runtime, it is smaller."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'<a name="vscode">\n')),Object(i.b)("h4",{id:"using-vscode"},"Using VsCode"),Object(i.b)("p",null,"If you are using ",Object(i.b)("a",{parentName:"p",href:"https://code.visualstudio.com/"},"VsCode")," as your Go development environment with the ",Object(i.b)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go"},"VsCode Go")," support, without errors and with completion working you need to:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"enable the option ",Object(i.b)("inlineCode",{parentName:"li"},"go.inferGopath")),Object(i.b)("li",{parentName:"ul"},"place all your sources in a ",Object(i.b)("inlineCode",{parentName:"li"},"src")," folder"),Object(i.b)("li",{parentName:"ul"},"either to open the ",Object(i.b)("inlineCode",{parentName:"li"},"src")," folder as the top level source or add it as a folder in the workspace (it is not enough just have it as a subfolder)"),Object(i.b)("li",{parentName:"ul"},"create a ",Object(i.b)("inlineCode",{parentName:"li"},"dummy.go"),' an empty main - it will not be used but it will shut up "',Object(i.b)("inlineCode",{parentName:"li"},"main.main"),' missing error detection"')),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Large portions of this page is copied from the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/apache/openwhisk/tree/master/docs"},"Apache OpenWhisk documentation")," on April 23rd 2021 - where there have been customisations to match Hypi's deployment this has been noted. Apache OpenWhisk and the Apache name are the property of the Apache Foundation and licensed under the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/apache/openwhisk/blob/master/LICENSE.txt"},"Apache V2 license")," ."))))}b.isMDXComponent=!0}}]);